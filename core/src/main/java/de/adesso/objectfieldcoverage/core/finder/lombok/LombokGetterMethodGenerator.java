package de.adesso.objectfieldcoverage.core.finder.lombok;

import lombok.AccessLevel;
import lombok.Getter;
import spoon.reflect.declaration.CtField;
import spoon.reflect.declaration.CtMethod;

/**
 * Interface abstraction for generating lombok getter methods. Handy when using {@code CtElement} mocks
 * in unit tests.
 */
public interface LombokGetterMethodGenerator {

    /**
     * Validates that a getter method would actually be generated by lombok. Lombok does not
     * generate getter methods when a method with the same signature as the generated getter
     * method already exists.
     *
     * @param field
     *          The field to check the declaring class of, not {@code null}. The field or its
     *          declaring class must be annotated with lombok's {@link Getter} annotation.
     *
     * @param accessLevel
     *          The access level of the generated getter, not {@code null}.
     *
     * @return
     *          {@code true}, if a method with the same signature as the generated getter method
     *          already exists on the {@code field}'s declaring class but the access modifier of the
     *          existing method does not match the given {@code accessLevel}. {@code false} is returned
     *          otherwise.
     */
    boolean isGetterMethodWithDifferentAccessModifierPresent(CtField<?> field, AccessLevel accessLevel);

    /**
     * Generates a getter method following the naming convention of getter methods generated
     * by lombok in case no method with the same return type and parameters is present
     * on the field's declaring type.
     *
     * @param field The field to generate a getter method for, not {@code null}.
     *
     * @param accessLevel The {@link AccessLevel} specified in the lombok annotation, not {@code null}.
     *
     * @param <T> The type of the field.
     *
     * @return A lombok getter method generated on the given {@code field}'s {@link CtField#getDeclaringType()
     * declaring type} or a existing method with the same method signature.
     */
    <T> CtMethod<T> generateGetterMethod(CtField<T> field, AccessLevel accessLevel);

}
